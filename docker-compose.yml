version: '3.8'

services:
  cassandra-ui-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - CASSANDRA_HOSTS=${CASSANDRA_HOSTS:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_DC=${CASSANDRA_DC:-datacenter1}
      - CASSANDRA_USERNAME=${CASSANDRA_USERNAME:-}
      - CASSANDRA_PASSWORD=${CASSANDRA_PASSWORD:-}
      - REFRESH_INTERVAL=${REFRESH_INTERVAL:-5000}
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - cassandra
    networks:
      - cassandra-network
    restart: unless-stopped

  cassandra-ui-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    depends_on:
      - cassandra-ui-backend
    networks:
      - cassandra-network
    restart: unless-stopped

  # Optional: Include Cassandra for testing
  cassandra:
    image: cassandra:4.1
    container_name: cassandra-temporal
    ports:
      - "9042:9042"
      - "7000:7000"
    environment:
      - CASSANDRA_CLUSTER_NAME=temporal-cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_NUM_TOKENS=256
    volumes:
      - cassandra-data:/var/lib/cassandra
    networks:
      - cassandra-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (mentioned in user rules)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - cassandra-network
    restart: unless-stopped

volumes:
  cassandra-data:

networks:
  cassandra-network:
    driver: bridge
